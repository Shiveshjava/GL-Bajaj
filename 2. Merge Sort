#include <stdio.h>
#include <stdlib.h>

int* mergesort(int i, int j, int* arr, int* returnSize);
int* merge2sortedarrays(int* arr1, int size1, int* arr2, int size2);

int main() {
    int arr[] = {1, 3, -7, 5, -2};
    int size = sizeof(arr) / sizeof(arr[0]);
    int returnSize;
    int* ans = mergesort(0, size - 1, arr, &returnSize);
    
    for (int i = 0; i < returnSize; i++) {
        printf("%d ", ans[i]);
    }
    printf("\n");
    
    free(ans);
    return 0;
}

int* mergesort(int i, int j, int* arr, int* returnSize) {
    if (i == j) {
        int* temp = (int*)malloc(sizeof(int));
        temp[0] = arr[i];
        *returnSize = 1;
        return temp;
    }
    int mid = (i + j) / 2;
    int returnSize1, returnSize2;
    int* fh = mergesort(i, mid, arr, &returnSize1);
    int* sh = mergesort(mid + 1, j, arr, &returnSize2);
    
    int* result = merge2sortedarrays(fh, returnSize1, sh, returnSize2);
    *returnSize = returnSize1 + returnSize2;
    
    free(fh);
    free(sh);
    
    return result;
}

int* merge2sortedarrays(int* arr1, int size1, int* arr2, int size2) {
    int* ans = (int*)malloc((size1 + size2) * sizeof(int));
    int i = 0, j = 0, k = 0;
    
    while (i < size1 && j < size2) {
        if (arr1[i] < arr2[j]) {
            ans[k++] = arr1[i++];
        } else {
            ans[k++] = arr2[j++];
        }
    }
    
    while (i < size1) {
        ans[k++] = arr1[i++];
    }
    
    while (j < size2) {
        ans[k++] = arr2[j++];
    }
    
    return ans;
}

